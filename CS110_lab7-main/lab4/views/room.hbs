<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{{roomName}}</title>
</head>
<body>
<button onclick="signOut(event)">Sign Out</button>
<button onclick="returnhome()">Return To Room List</button>
<h1> Room </h1>
<p>This is a demo of chatroom page</p>
<p>
    The room you are visiting is {{ roomName }}
    The room id is {{roomID}}
</p>
<form id="message-search" onsubmit="find_message(event)">
    <label>Search messages here by date</label>
    <input type="date" name="message" id="message-search-box" required>
    <button type="submit" class="btn btn-primary">Submit</button>
</form>
<button id = "message-search-clear"onclick="clear_message_search_results()" style="display:none">Clear Search Results</button>
<ul id="messages-search-results"></ul>
<ul id="messages-list"></ul>

<form id="messageForm" onsubmit="post_new_message(event, '{{roomName}}', '{{roomID}}')">
    <label>Enter Message Here</label>
    <input type="text" name="message" id="message" required>
    <button type="submit" class="btn btn-primary">Submit</button>
</form>
<script src="/util/roomIdGenerator.js"></script>
<script>   
 let CurrentUserNickname = '{{userName}}';

 async function post_new_message(event, roomName, roomID) {
    event.preventDefault();

    if (CurrentUserNickname === '' || CurrentUserNickname === null) {
        CurrentUserNickname = prompt("Please enter a nickname", "");
        if (CurrentUserNickname === null) {
            return;
        }
    }

    const message = document.getElementById('message').value;
    const messageID = generateRoomIdentifier();

    try {
        await fetch(`/${roomName}/${roomID}/${messageID}/${CurrentUserNickname}/${encodeURIComponent(message)}/{{userEmail}}`, {
            method: 'POST'
        });

        document.getElementById('message').value = ''; 
        fetchMessages(roomName, roomID);
    } catch (error) {
        console.log("Error posting message:", error);
    }
 }

 async function fetchMessages(roomName, roomID) {
    try {
        const response = await fetch(`/${roomName}/${roomID}/messages`);
        const messages = await response.json();
        updateMessagesList(messages);
    } catch (error) {
        console.error('Error fetching messages:', error);
    }
 }

 function updateMessagesList(messages) {
    const messagesList = document.getElementById('messages-list');
    messagesList.innerHTML = '';
    messages.forEach(message => {
        const li = document.createElement('li');
        li.id = message.messageID;
        li.innerHTML = `${message.nickname} ${message.date} ${message.time}<br/> ${message.body}`;
        if (message.email === '{{userEmail}}') {
            li.innerHTML += `<br/> <button onclick="editMessage('${message.messageID}', '${message.body}')">Edit</button> 
                             <button onclick="deleteMessage('${message.messageID}')">Delete</button>`;
        }
        messagesList.appendChild(li);
    });
 }

 async function editMessage(messageID, currentBody) {
    const newBody = prompt("Edit your message:", currentBody);
    if (newBody === null) return;
    url = '/{{roomName}}/{{roomID}}/'+messageID+'/edit';
    try {
        await fetch(url, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ body: newBody })
        });
        fetchMessages('{{roomName}}', '{{roomID}}');
    } catch (error) {
        console.error('Error editing message:', error);
    }
 }

 async function deleteMessage(messageID) {
    const confirmDelete = confirm("Are you sure you want to delete this message?");
    if (!confirmDelete) return;
    url = '/{{roomName}}/{{roomID}}/'+messageID+'/delete';
    try {
        await fetch(url, {
            method: 'DELETE'
        });
        fetchMessages('{{roomName}}', '{{roomID}}');
    } catch (error) {
        console.error('Error deleting message:', error);
    }
 }
 
 async function find_message(event) {
    event.preventDefault();

    search_date = document.getElementById('message-search-box').value;
    console.log(search_date)
    const [year, month, day] = search_date.split('-');
    search_date = `${month}-${day}-${year}`;
    console.log(search_date)
    url = `/{{roomName}}/{{roomID}}/search/`+ String(search_date);
    
    try {
        const response = await fetch(url);
        if(response.status === 404){
            const messagesList = document.getElementById('messages-search-results');
            messagesList.innerHTML = '';
            search_date.innerHTML = '';
            const p = document.createElement('p');
            p.innerHTML = 'No messages on this date'
            messagesList.appendChild(p);
        }
        else {
            const messages = await response.json();
            const messagesList = document.getElementById('messages-search-results');
            messagesList.innerHTML = '';
            search_date.innerHTML = '';
            messages.forEach(message => {
            const li = document.createElement('li');
            li.id = message.messageID;
            li.innerHTML = `${message.nickname} ${message.date} ${message.time}<br/> ${message.body}`;
            if (message.email === '{{userEmail}}') {
                li.innerHTML += `<br/> <button onclick="editMessage('${message.messageID}', '${message.body}')">Edit</button> 
                                <button onclick="deleteMessage('${message.messageID}')">Delete</button>`;
            }
            messagesList.appendChild(li);
            });
        }
        const clear_btn = document.getElementById('message-search-clear');
        clear_btn.style.display = "block";
    } catch (error) {
        console.error('Error deleting message:', error);
    }
 }

 function clear_message_search_results(){
    const messagesList = document.getElementById('messages-search-results');
    messagesList.innerHTML = '';
    const clear_btn = document.getElementById('message-search-clear');
    clear_btn.style.display = "none";
 }

 function returnhome() {
    window.location.href = '/home';
 }

 function signOut(){
    window.location.href = '/';
 }

 // Fetch messages initially and then periodically
 fetchMessages('{{roomName}}', '{{roomID}}');
 setInterval(() => fetchMessages('{{roomName}}', '{{roomID}}'), 3000);

</script>
</body>
</html>

<div class="room-container">
<div class="options">
<button class = "option-btn" onclick="returnhome()">Return To Room List</button>
<button class = "option-btn" onclick="signOut(event)">Sign Out</button>
</div>
<div class="description">
<p>
    The room you are visiting is {{ roomName }}
</p>
<p>
    The room id is {{roomID}}
</p>
</div>
<div class="message-search-options">
    <form class="msg-search" id="message-search" onsubmit="find_message(event)">
        <label>Search messages here</label>
        <input type="text" name="message" id="message-search-box" required>
        <button type="submit" class="btn btn-primary">Submit</button>
    </form>
    <form class="msg-search" id="message-search-date" onsubmit="find_message_by_date(event)">
        <label>Search messages here by date</label>
        <input type="date" name="message" id="message-search-date-box" required>
        <button type="submit" class="btn btn-primary">Submit</button>
    </form>
    <button id = "message-search-clear" onclick="clear_message_search_results()" style="display:none">Clear Search Results</button>
</div>
<div class="message-display" id="message-display-results"style="display:none">
    <ul id="messages-search-results"></ul>
</div>
<div class="main-message-content">
    <div class="message-display">
        <ul id="messages-list"></ul>
    </div>

    <div class="message-entry">
        <div class="small-spacer"></div>
        <div class="message-entry-field">
            <form id="messageForm" onsubmit="post_new_message(event, '{{roomName}}', '{{roomID}}')">
                <input type="text" name="message" id="message" required>
                <button type="submit" class="btn btn-primary">Enter</button>
            </form>
        </div>
        <div class="small-spacer"></div>
    </div>
</div>
<div class="spacer"></div>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/dompurify/2.3.6/purify.min.js"></script>
<script src="/util/roomIdGenerator.js"></script>
<script>   
 let CurrentUserNickname = '{{userName}}';

 async function post_new_message(event, roomName, roomID) {
    event.preventDefault();

    if (CurrentUserNickname === '' || CurrentUserNickname === null) {
        CurrentUserNickname = prompt("Please enter a nickname", "");
        if (CurrentUserNickname === null) {
            return;
        }
    }

    let message = document.getElementById('message').value;
    message = DOMPurify.sanitize(message, { ALLOWED_TAGS: [], ALLOWED_ATTR: [] });
    const messageID = generateRoomIdentifier();

    try {
        await fetch(`/${roomName}/${roomID}/${messageID}/${CurrentUserNickname}/${encodeURIComponent(message)}/{{userEmail}}`, {
            method: 'POST'
        });

        document.getElementById('message').value = ''; 
        fetchMessages(roomName, roomID);
    } catch (error) {
        console.log("Error posting message:", error);
    }
 }

 async function fetchMessages(roomName, roomID) {
    try {
        const response = await fetch(`/${roomName}/${roomID}/messages`);
        const messages = await response.json();
        updateMessagesList(messages);
    } catch (error) {
        console.error('Error fetching messages:', error);
    }
 }

 function updateMessagesList(messages) {
    const messagesList = document.getElementById('messages-list');
    messagesList.innerHTML = '';
    messages.forEach(message => {
        const li = document.createElement('div');
        li.id = message.messageID;

        if (message.email === '{{userEmail}}') {
            li.innerHTML = `<div class = "usr-message-content"> 
                                <div class= "usr-heading"> 
                                    <div class="usr-nick-name">${message.nickname}</div> 
                                    <div class= "usr-date">${message.date}</div>  
                                    <div class = "usr-time">${message.time}</div> 
                                </div> 
                                <div class = "usr-msg">${message.body}</div>
                            </div> 
                            <button class = "edit-btn"onclick="editMessage('${message.messageID}', '${message.body}')">Edit</button>  
                            <button  class = "delete-btn" onclick="deleteMessage('${message.messageID}')">Delete</button>`;
            li.className = 'user-msg';
        }
        else{

            li.innerHTML = `<div class = "other-message-content"> 
                                <div class= "other-heading"> 
                                    <div class="other-nick-name">${message.nickname}</div> 
                                    <div class= "other-date">${message.date}</div>  
                                    <div class = "other-time">${message.time}</div> 
                                </div>  
                                <div class = "other-msg">${message.body}</div>
                            </div> `;
            li.className = 'other-msg'

            }

        messagesList.appendChild(li);
    });
 }

 async function editMessage(messageID, currentBody) {
    const newBody = prompt("Edit your message:", currentBody);
    if (newBody === null) return;
    url = '/{{roomName}}/{{roomID}}/'+messageID+'/edit';
    try {
        await fetch(url, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ body: newBody })
        });
        fetchMessages('{{roomName}}', '{{roomID}}');
    } catch (error) {
        console.error('Error editing message:', error);
    }
 }

 async function deleteMessage(messageID) {
    const confirmDelete = confirm("Are you sure you want to delete this message?");
    if (!confirmDelete) return;
    url = '/{{roomName}}/{{roomID}}/'+messageID+'/delete';
    try {
        await fetch(url, {
            method: 'DELETE'
        });
        fetchMessages('{{roomName}}', '{{roomID}}');
    } catch (error) {
        console.error('Error deleting message:', error);
    }
 }
 
 async function find_message_by_date(event) {
    event.preventDefault();

    const search_date = document.getElementById('message-search-date-box').value;
    console.log(search_date)
    const [year, month, day] = search_date.split('-');
    const formatted_date = `${month}-${day}-${year}`;
    console.log(formatted_date)
    const url = `/{{roomName}}/{{roomID}}/search-date/`+ String(formatted_date);

    try {
        const response = await fetch(url);
        const messagesList = document.getElementById('messages-search-results');
        messagesList.innerHTML = '';
        if (response.status === 404) {
            const p = document.createElement('p');
            p.innerHTML = 'No messages on date: ' + formatted_date;
            p.className='no-msg-found';
            messagesList.appendChild(p);
        } else {
            const messages = await response.json();
            messages.forEach(message => {
                const li = document.createElement('div');
                li.id = message.messageID;

                if (message.email === '{{userEmail}}') {
                    li.innerHTML = `<div class="usr-message-content"> 
                                        <div class="usr-heading"> 
                                            <div class="usr-nick-name">${message.nickname}</div> 
                                            <div class="usr-date">${message.date}</div>  
                                            <div class="usr-time">${message.time}</div> 
                                        </div> 
                                        <div class="usr-msg">${message.body}</div>
                                    </div> 
                                    <button class="edit-btn" onclick="editMessage('${message.messageID}', '${message.body}')">Edit</button>  
                                    <button class="delete-btn" onclick="deleteMessage('${message.messageID}')">Delete</button>`;
                    li.className = 'user-msg';
                } else {
                    li.innerHTML = `<div class="other-message-content"> 
                                        <div class="other-heading"> 
                                            <div class="other-nick-name">${message.nickname}</div> 
                                            <div class="other-date">${message.date}</div>  
                                            <div class="other-time">${message.time}</div> 
                                        </div>  
                                        <div class="other-msg">${message.body}</div>
                                    </div>`;
                    li.className = 'other-msg';
                }
                messagesList.appendChild(li);
            });
        }
        document.getElementById('message-display-results').style.display = "block";
        document.getElementById('message-search-clear').style.display = "block";

    } catch (error) {
        console.error('Error finding message:', error);
    }
}

 async function find_message(event) {
    event.preventDefault();

    const search_term = document.getElementById('message-search-box').value;

    const url = `/{{roomName}}/{{roomID}}/search-message/`+ String(search_term);

    try {
        const response = await fetch(url);
        const messagesList = document.getElementById('messages-search-results');
        messagesList.innerHTML = '';
        if (response.status === 404) {
            const p = document.createElement('p');
            p.innerHTML = 'No messages with phrase: \"' + search_term+'\"';
            p.className='no-msg-found';
            messagesList.appendChild(p);
        } else {
            const messages = await response.json();
            messages.forEach(message => {
                const li = document.createElement('div');
                li.id = message.messageID;

                if (message.email === '{{userEmail}}') {
                    li.innerHTML = `<div class="usr-message-content"> 
                                        <div class="usr-heading"> 
                                            <div class="usr-nick-name">${message.nickname}</div> 
                                            <div class="usr-date">${message.date}</div>  
                                            <div class="usr-time">${message.time}</div> 
                                        </div> 
                                        <div class="usr-msg">${message.body}</div>
                                    </div> 
                                    <button class="edit-btn" onclick="editMessage('${message.messageID}', '${message.body}')">Edit</button>  
                                    <button class="delete-btn" onclick="deleteMessage('${message.messageID}')">Delete</button>`;
                    li.className = 'user-msg';
                } else {
                    li.innerHTML = `<div class="other-message-content"> 
                                        <div class="other-heading"> 
                                            <div class="other-nick-name">${message.nickname}</div> 
                                            <div class="other-date">${message.date}</div>  
                                            <div class="other-time">${message.time}</div> 
                                        </div>  
                                        <div class="other-msg">${message.body}</div>
                                    </div>`;
                    li.className = 'other-msg';
                }
                messagesList.appendChild(li);
            });
        }
        document.getElementById('message-display-results').style.display = "block";
        document.getElementById('message-search-clear').style.display = "block";

    } catch (error) {
        console.error('Error finding message:', error);
    }
}

function clear_message_search_results() {
    document.getElementById('message-display-results').style.display = "none";
    document.getElementById('message-search-clear').style.display = "none";
    const search_term = document.getElementById('message-search-box');
    search_term.value='';
    const search_date = document.getElementById('message-search-date-box');
    search_date.value='';
}

 function returnhome() {
    window.location.href = '/home';
 }

 function signOut(){
    window.location.href = '/';
 }

 // Fetch messages initially and then periodically
 fetchMessages('{{roomName}}', '{{roomID}}');
 setInterval(() => fetchMessages('{{roomName}}', '{{roomID}}'), 3000);

</script>

